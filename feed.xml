<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-02-17T19:51:27+00:00</updated><id>/feed.xml</id><title type="html">the ramen space</title><subtitle>The personal site of @abiramen.</subtitle><entry><title type="html">The Hitchhiker’s Guide to Security</title><link href="/security-guide" rel="alternate" type="text/html" title="The Hitchhiker's Guide to Security" /><published>2021-01-15T00:00:00+00:00</published><updated>2021-01-15T00:00:00+00:00</updated><id>/security-guide</id><content type="html" xml:base="/security-guide">&lt;p&gt;&lt;strong&gt;This is currently a draft version which I released for CompClub. Check back in a month for the complete version.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;so remember, don’t give out your name and personal information to strangers online !!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, no. This article is going to assume that you’ve grown up with the Internet and have some common sense. However, this guide is not for you if:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you’re being targeted by state-sponsored hackers, or someone really has a vendetta against you. At that point, you should probably seek some expert advice.&lt;/li&gt;
  &lt;li&gt;you’re some whiz and this is amateur stuff - yeah, I’m sorry …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;la-table-des-matières&quot;&gt;La table des matières&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#curb-your-insecurity&quot; class=&quot;page-anchor-offset&quot;&gt;Curb your insecurity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#passwords&quot; class=&quot;page-anchor-offset&quot;&gt;Passwords&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#to-catch-a-phish&quot; class=&quot;page-anchor-offset&quot;&gt;Gone phishing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multi-factor-authentication&quot; class=&quot;page-anchor-offset&quot;&gt;Multi-factor authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#browser-extensions&quot; class=&quot;page-anchor-offset&quot;&gt;Browser extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;curb-your-insecurity&quot;&gt;Curb your insecurity&lt;/h2&gt;
&lt;p&gt;There’s a good chance that you’ve seen this padlock in your browser, and understood that it has something to do with security, but not fully understand the implications of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/security-guide/https-padlock.jpg&quot; alt=&quot;HTTPS padlock&quot; /&gt;
You probably also know that the S in HTTPS stands for ‘secure’. The only guarantee that HTTPS provides over regular HTTP is that the contents of your communication with the website can only be read by your own computer and the website, and has not been tampered with along the way, either by a nefarious hacker, or your Internet Service Provider (or ISP, such as Telstra and Optus).&lt;/p&gt;

&lt;p&gt;It’s worth noting that your ISP can only figure out what web server you’re connected to, but not exactly what webpage. For example, if you’re watching the YouTube video &lt;a href=&quot;https://youtu.be/dQw4w9WgXcQ&quot; target=&quot;_blank&quot;&gt;at this URL&lt;/a&gt;, your ISP would only be able to figure out that you visited YouTube, but not know what exact video you watched. &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;You shouldn’t enter sensitive information, especially banking information and passwords, if a site isn’t using HTTPS. Almost every site in 2020 uses HTTPS, and there’s no reason for a website not to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/security-guide/certificate-error.jpg&quot; alt=&quot;Certificate error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may have also seen warning messages like the above. Messages like these are more likely due to misconfigurations by the website owner, or an issue up the chain of trust which HTTPS depends on. If you decide to click past the warning, you should treat the site as if it is using HTTP, and understand that your communication with the site is unencrypted.&lt;/p&gt;

&lt;h2 id=&quot;passwords&quot;&gt;Passwords&lt;/h2&gt;

&lt;p&gt;Of course, a malicious hacker doesn’t need to bother to trick you when they could just &lt;em&gt;become&lt;/em&gt; you, which is why following good password practices is extremely important.&lt;/p&gt;

&lt;p&gt;You’ve probably seen the message to use different passwords on different websites before, and maybe you’ve been too lazy to do this yourself - I wasn’t bothered to do this until a few years ago. &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; This is a terrible idea, however - inevitably, a website you use is going to leak their passwords in some form, and it’s not hard for someone to attempt to reuse your password on another site using an automated script.&lt;/p&gt;

&lt;h3 id=&quot;have-i-already-been-compromised&quot;&gt;Have I already been compromised?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://haveibeenpwned.com/&quot;&gt;have i been pwned?&lt;/a&gt; is a reputable way to check if your email address has been associated with any data breaches. If you find yourself there, make sure that you change your password for that site, and make sure to change your password for any other sites that might be using the same password.&lt;/p&gt;

&lt;h3 id=&quot;some-basic-password-rules&quot;&gt;Some basic password rules&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Have a nice mix of uppercase, lowercase, numbers and symbols.&lt;/li&gt;
  &lt;li&gt;Avoid having a common words/phrases as your password - these are easier to guess, in what’s known as a dictionary attack.&lt;/li&gt;
  &lt;li&gt;Have a different password for each website/service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even chaining four &lt;em&gt;random&lt;/em&gt; words together isn’t too bad of a password &lt;strong&gt;if&lt;/strong&gt; you throw in a few random numbers and symbols. There’s a classic &lt;a href=&quot;https://xkcd.com/936/&quot; target=&quot;_blank&quot;&gt;comic&lt;/a&gt; that’s well known amongst the security community:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/password_strength.png&quot; alt=&quot;Password strength XKCD&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;choosing-passwords&quot;&gt;Choosing passwords&lt;/h3&gt;

&lt;p&gt;I personally use a password manager for all but a small few of my passwords. For the rest of my passwords, I splice together lyrics from some songs I like (although not my favourites, since that’s relatively easy to determine with some quick Googling), and throw in a bunch of numbers and symbols randomly. This means that I can sing along my passwords in my head, while still having something that’s strong and 30+ characters long.&lt;/p&gt;

&lt;h3 id=&quot;password-managers&quot;&gt;Password managers&lt;/h3&gt;

&lt;p&gt;Having a password manager saves you the effort of having to memorise different passwords for different websites - instead, you use a super-strong ‘master password’ on the password manager, and then the password manager generates and stores secure passwords for other websites. Many solid password managers exist, and even using Google’s password manager across Chrome and Android for unique passwords is a massive improvement for most people’s security.&lt;/p&gt;

&lt;p&gt;I personally use LastPass - it seems to be very thoroughly audited and verified, has a strong feature set, and is popular amongst the security community.&lt;/p&gt;

&lt;h2 id=&quot;gone-phishing&quot;&gt;Gone phishing&lt;/h2&gt;
&lt;p&gt;However, you shouldn’t trust a website just because it’s using HTTPS. The original inspiration for this blogpost was a long Facebook post I ended up over a year ago, after a large chain of phishing attacks &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; on Facebook Messenger. Most messages looked something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/security-guide/phishy.jpg&quot; alt=&quot;A phishy message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking that link led to a Facebook post, which had a fake URL to a ‘YouTube’ video. That URL led to this…
&lt;img src=&quot;/assets/images/blog/security-guide/facebook-phish.jpg&quot; alt=&quot;Not very real Facebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a few red flags here.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This Facebook login page looks nothing like the real Facebook login page.&lt;/li&gt;
  &lt;li&gt;The URL looks like a random mess which does not say ‘facebook.com’.&lt;/li&gt;
  &lt;li&gt;You’re being asked to log in to Facebook, to watch what is supposedly a YouTube video?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some questions you can ask yourself before clicking on a link you didn’t expect to receive are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Does this URL seem to be legitimate? :&lt;/strong&gt; You can often search for the domain (the first part of the domain, for example, www.google.com) to check if it’s a legitimate domain owned by a company.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Does the person who sent me the link normally talk to me? :&lt;/strong&gt; If you’re receiving a message from someone that doesn’t normally talk to you, or the grammar/structure of their message doesn’t seem quite right, it’s probably sus.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Why am I being asked for a password? :&lt;/strong&gt; If you’re already logged into a site like Facebook or Google, you generally won’t be requested for a username or password again. Look closely at the URL of the login page, and make sure it matches the service you’re logging in with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multi-factor-authentication&quot;&gt;Multi-factor authentication&lt;/h2&gt;

&lt;p&gt;Multi-factor authentication is a way to mitigate the impact of your password being leaked, or stolen in a phishing attack. Typical login systems only involve one factor - your password.&lt;/p&gt;

&lt;p&gt;There are three different types of factors that we can involve in a login system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;something you know (such as a typical password)&lt;/li&gt;
  &lt;li&gt;something you are (biometrics, such as fingerprints)&lt;/li&gt;
  &lt;li&gt;something you have (such as your phone)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enabling multi-factor authentication typically involves using the first 2. This means that once you enter your password, you’ll be asked to enter a code from your phone. This means that a stolen password isn’t enough to log in as you.&lt;/p&gt;

&lt;p&gt;I recommend enabling multi-factor authentication for things such as your email, Facebook and bank accounts. I personally choose to use it for any service that supports it. You can find instructions on enabling multi-factor authentication, also known as two-factor authentication, usually on the Account Settings page for a service.&lt;/p&gt;

&lt;h2 id=&quot;browser-extensions&quot;&gt;Browser extensions&lt;/h2&gt;

&lt;p&gt;A lot of people seem to use browser extensions without giving it too much thought. However, a lot of browser extensions require you to provide access to all data on sites you visit. An evil extension could use this to steal your usernames and passwords as you type them in.&lt;/p&gt;

&lt;p&gt;This is why you should limit the access you provide to extensions. You can change which websites an extension has to on Chrome by visiting chrome://extensions, and then clicking on an extension which you want to change.&lt;/p&gt;

&lt;p&gt;For example, I have an extension called Video Speed Controller, which allows me to speed up and slow down videos as much as I want, but I only give it access to YouTube, Netflix and Disney Plus. The only extensions I have with full access are LastPass and uBlock Origin - a tradeoff I am willing to make for convenience.&lt;/p&gt;

&lt;p&gt;I’d also recommend using Guest mode on your browser when entering banking details.&lt;/p&gt;

&lt;h2 id=&quot;more-content-coming-soon&quot;&gt;More content coming soon!&lt;/h2&gt;

&lt;h2 id=&quot;closing-remarks&quot;&gt;Closing remarks&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/blog/security-guide/closing-remarks.jpg&quot; alt=&quot;Closing remarks&quot; /&gt;
If you’d like to reach out with feedback, my contact details are on the bottom of this page.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This means that your ISP won’t be able to shame you for being rickrolled :) &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I had two-factor authentication on for anything important, but was still a bit naive. Mostly lazy, but still a bit naive. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A phishing attack is an attempt to steal passwords or other sensitive information by posing as someone or something you trust. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="security" /><summary type="html">This is currently a draft version which I released for CompClub. Check back in a month for the complete version.</summary></entry><entry><title type="html">CompClub CTF 2021</title><link href="/compclub-2021" rel="alternate" type="text/html" title="CompClub CTF 2021" /><published>2021-01-15T00:00:00+00:00</published><updated>2021-01-15T00:00:00+00:00</updated><id>/compclub-2021</id><content type="html" xml:base="/compclub-2021">&lt;p&gt;I’ve been looking for the opportunity to do some form of high school outreach program for a while, so when CSESoc’s (my uni’s constituent society for computer science related degrees) CompClub decided to take applications for workshop developers, and saw the option for a security workshop, I knew I had to sign up. The following CTF was the result of my work with the help of a few fellow fantastic volunteers.&lt;/p&gt;

&lt;h3 id=&quot;la-table-des-matières&quot;&gt;La table des matières&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#behind-the-scenes&quot; class=&quot;page-anchor-offset&quot;&gt;Behind the scenes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-constraints&quot; class=&quot;page-anchor-offset&quot;&gt;Challenge constraints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges-and-solutions&quot; class=&quot;page-anchor-offset&quot;&gt;Challenges and solutions!&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Crypto
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#a-strange-shift-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;A strange shift&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#compclub-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;compclub&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#shooting-stars-35-points&quot; class=&quot;page-anchor-offset&quot;&gt;Shooting Stars&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#an-actual-flag-50-points&quot; class=&quot;page-anchor-offset&quot;&gt;An actual flag&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;OSINT
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#firednd-0-25-points&quot; class=&quot;page-anchor-offset&quot;&gt;firednd-0&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#firednd-1-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;firednd-1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#firednd-2-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;firednd-2&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Web
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#simplelogin-30-points-each&quot; class=&quot;page-anchor-offset&quot;&gt;simple-login&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Forensics
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#spotify-20-points&quot; class=&quot;page-anchor-offset&quot;&gt;Spotify&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blank-space-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;Blank Space&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#egg-nog-50-points&quot; class=&quot;page-anchor-offset&quot;&gt;Egg nog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Miscellaneous
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#slides-10-points&quot; class=&quot;page-anchor-offset&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#what-was-that-25-points&quot; class=&quot;page-anchor-offset&quot;&gt;What was that?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#starlang-30-points&quot; class=&quot;page-anchor-offset&quot;&gt;starlang&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; class=&quot;page-anchor-offset&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;behind-the-scenes&quot;&gt;Behind the scenes&lt;/h1&gt;
&lt;p&gt;While I’ve had the opportunity to write CTF challenges for &lt;a href=&quot;https://unswsecurity.com&quot; target=&quot;_blank&quot;&gt;UNSW Security Society&lt;/a&gt; over the past year, and hope to write plenty more this year, this was the first time when I’ve been responsible for getting the CTF infrastructure up and running, and deploying challenges.&lt;/p&gt;

&lt;p&gt;If you’re interested in how I did this, particularly if you’re a CompClub workshop developer from the future and trying to figure out how to run a CTF, the README I wrote up in &lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf&quot; target=&quot;_blank&quot;&gt;this repo&lt;/a&gt; should help you out.&lt;/p&gt;

&lt;p&gt;The source code for all the challenges, as well as their writeups can be found there too!&lt;/p&gt;

&lt;h1 id=&quot;constraints&quot;&gt;Constraints&lt;/h1&gt;
&lt;p&gt;The CTFs I’ve written for in the past have ran for at least 4 hours, and at most 2 days. Writing a CTF with essentially a 2 hour time constraint was one of my main challenges. Another was catering to a variety of experience levels while remaining within the time limit. I also had to avoid OSINT challenges which involved trawling social media, since I couldn’t make the assumption that all students had access to social media.&lt;/p&gt;

&lt;h1 id=&quot;challenges-and-solutions&quot;&gt;Challenges and solutions&lt;/h1&gt;
&lt;p&gt;Here are all the challenges! The solutions are hidden until you click on them, so that you can try challenges without spoilers.&lt;/p&gt;

&lt;h2 id=&quot;crypto&quot;&gt;Crypto&lt;/h2&gt;
&lt;h3 id=&quot;a-strange-shift-30-points&quot;&gt;A strange shift (30 points)&lt;/h3&gt;

&lt;p&gt;Worked two different shifts in one day at Maccas, and I’m too tired to decode this. This dude kept ordering a Chicken Caesar Salad, and uttering this strange code. Can you decode it for me?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQNL{sby_n_ibucqrw_xunsy}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;The most obvious hint here is the reference to the Caesar cipher, further confirmed by the use of the word shift. However, we could try all 26 possibilities here, and none of them would result in a coherent FLAG.&lt;/p&gt;

  &lt;p&gt;The sneakier part that you may not have caught in the wording is the ‘double shift’ - two different Caesar shifts were used.&lt;/p&gt;

  &lt;p&gt;One thing we can note is that we can expect the message to start with FLAG. If we try to rig a shift so that we get the first letter to be F (+13), we get:&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FDAY{fol_a_vohpdej_khafl}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Interestingly, this also gets the A in the right place, giving us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F_A_&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;Shifting to get L in the second position (-5) gives us&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NLIG{nwt_i_dwpxlmr_spint}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;This time, we also get the G in the right place! This suggests that there are two alternating shifts.&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FDAY{fol_a_vohpdej_khafl}
NLIG{nwt_i_dwpxlmr_spint}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Taking alternating letters, we get our flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{not_a_doppler_shift}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;compclub-30-points&quot;&gt;compclub (30 points)&lt;/h3&gt;

&lt;p&gt;compclub&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compclubcompcompcompclubclubcomp compclubcompcompclubclubcompcomp
compclubcompcompcompcompcompclub compclubcompcompcompclubclubclub
compclubclubclubclubcompclubclub compclubclubcompcompcompclubcomp
compclubclubclubclubcompcompclub compclubcompclubcompclubcompcomp
compcompclubclubcompcompclubclub compclubcompclubclubclubclubclub
compclubclubclubcompcompclubclub compcompclubclubcompcompcompclub
compclubclubclubclubcompclubcomp compclubcompcompcompclubcompclub
compclubclubcompcompclubcompcomp compclubclubclubclubclubcompclub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;solution-1&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-1&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;We seem to have the strings ‘comp’ and ‘club’ as base units here - this seems very much like a binary system!&lt;/p&gt;

  &lt;p&gt;There also seems to be exactly 8 comps or clubs in a group, or exactly a byte! This suggests that the FLAG could be encoded in ASCII.&lt;/p&gt;

  &lt;p&gt;We know that all ASCII characters represented as a binary byte start with 0. Since all the groups start with comp, we can guess that comp is 0, and club is 1.&lt;/p&gt;

  &lt;p&gt;Replacing, we get,&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01001100 01000001 01000111 01111011 01100010 01111001 01010100 00110011 01011111 01110011 00110001 01111010 01000101 01100100 01111101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Converting these into their ASCII characters, we get our flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-1&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{byT3_s1zEd}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;shooting-stars-35-points&quot;&gt;Shooting Stars (35 points)&lt;/h3&gt;

&lt;p&gt;found this cool book about shooting stars! i love shooting stars. the index fell out though.&lt;/p&gt;

&lt;p&gt;Remember to wrap your answer with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{}&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/crypto/shooting-stars/_ctfd/files/book.txt&quot;&gt;book.txt&lt;/a&gt;
&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/crypto/shooting-stars/_ctfd/files/index.txt&quot;&gt;index.txt&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-2&quot;&gt;Solution&lt;/h4&gt;
&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-2&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;The name of the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.txt&lt;/code&gt; hints that the numbers in its contents could be some way that we could index the book, just like we index lists/arrays when programming.&lt;/p&gt;

  &lt;p&gt;We can see the numbers occur in pairs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a, b)&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; values can get pretty big, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; is always relatively small (at most, 6). This suggests that the second number could be some way of indexing a character within a word. Maybe the first number could be the index of the word we’re using?&lt;/p&gt;

  &lt;p&gt;We can also see a couple of 0s occurring in the index, for example, the second pair is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0, 0)&lt;/code&gt;. This suggests that both words and characters are zero-indexed, just like lists and arrays in most programming languages start counting from 0.&lt;/p&gt;

  &lt;p&gt;This is what is known as a book cipher. You could either try manually calculating each of the letters, writing a script to do it, or using a website &lt;a href=&quot;https://www.boxentriq.com/code-breaking/book-cipher&quot;&gt;like this one&lt;/a&gt; to decode it. You’ll need to convert all the index pairs to match the format on that site. Make sure you select the correct options (word number, character number, none), and set the numbering start to 0. Once you do this, you should get your flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-2&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{lightpollution}&lt;/code&gt;&lt;/p&gt;

  &lt;h5 id=&quot;other-notes&quot;&gt;Other notes&lt;/h5&gt;
  &lt;p&gt;The contents of the book are actually the lyrics to Shooting Stars by Bag Raiders.&lt;/p&gt;

&lt;/details&gt;

&lt;h3 id=&quot;an-actual-flag-50-points&quot;&gt;An actual flag (50 points)&lt;/h3&gt;

&lt;p&gt;Was bored, decided to colonise a new planet. Wanted to incorporate the planet name in its flag design - can you find it?&lt;/p&gt;

&lt;p&gt;Remember to wrap your answer with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{}&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/crypto/an-actual-flag/_ctfd/files/anactualflag.png&quot; target=&quot;_blank&quot;&gt;anactualflag.png&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-3&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-3&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;Typically with an image challenge, I would go through&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Metadata (basically non-existent with PNG files)&lt;/li&gt;
    &lt;li&gt;Photoshop levels (and other adjustments)&lt;/li&gt;
    &lt;li&gt;Steganography&lt;/li&gt;
    &lt;li&gt;Hexdump (checking through the raw bytes in the file for any anomalies, but not typical in a beginner’s CTF of this level).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;It’s certainly worth checking through these if everything else fails, but this is a crypto challenge, not a forensics challenge. The wording of the challenge also suggests that the name being hidden in the flag is intrisic to the flag design itself, and not the file.&lt;/p&gt;

  &lt;p&gt;At this point, we can analyse the colours in the image - there are three of them:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;#486163&lt;/li&gt;
    &lt;li&gt;#6b746f&lt;/li&gt;
    &lt;li&gt;#706961&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;It’s worth noting this image looks really dull. Breaking each of the colours into their subpixels (or bytes):&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;48 61 63&lt;/li&gt;
    &lt;li&gt;6b 74 6f&lt;/li&gt;
    &lt;li&gt;70 69 61&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;We can see that none of the bytes are greater than 7F, which is equal to 127 in decimal. This suggests that the colours may be being used to encode ASCII values.&lt;/p&gt;

  &lt;p&gt;If we convert each byte to their corresponding ASCII values (remember to use the hexadecimal column on the ASCII table), we get&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;H a c&lt;/li&gt;
    &lt;li&gt;k t o&lt;/li&gt;
    &lt;li&gt;p i a&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;revealing the flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-3&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{Hacktopia}&lt;/code&gt;&lt;/p&gt;

&lt;/details&gt;

&lt;h2 id=&quot;osint&quot;&gt;OSINT&lt;/h2&gt;
&lt;h3 id=&quot;firednd-0-25-points&quot;&gt;firednd-0 (25 points)&lt;/h3&gt;

&lt;p&gt;Hello! CEO of FireDnD here! We’re a small startup that aims to connect people together for games of Dungeons and Dragons. You can check out our (incomplete - more on that later) website &lt;a href=&quot;https://firednd-syd.web.app&quot; target=&quot;_blank&quot;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this website is down, &lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/tree/main/osint/firednd-src&quot; target=&quot;_blank&quot;&gt;you can find the source code here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve got a few tasks for you to complete, but before we start, could you do me a favour?&lt;/p&gt;

&lt;p&gt;I’m supposed to meet up with someone after work today. I finish at 5PM, and take 8 minutes to walk from my office to Platform 2 of the nearest&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; station. I then need to catch the next T4 train, before I get off at the second stop. Can you figure out what time I get off the train (rounded to the nearest minute)?&lt;/p&gt;

&lt;p&gt;Your answer should be a 24-hour time. For example, if your answer is 6:04PM, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{1804}&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;solution-4&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-4&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;This requires some minor intelligence gathering:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Note that FireDnD’s offices are located at 33-39 Hunter Street, Sydney. This can be found on the site’s footer, or ‘Contact Us’ page.&lt;/li&gt;
    &lt;li&gt;The nearest station can be found using the measure distance tool on Google Maps - this is Martin Place station - however, it only barely beats out Wynyard station.&lt;/li&gt;
    &lt;li&gt;We are told that the CEO wishes to take a T4 train from Platform 2 - if you chose Wynyard Station earlier, this is a big clue that something may have gone wrong, as &lt;strong&gt;no T4 trains pass through Wynyard&lt;/strong&gt;. Avid train nerds may also note that Wynyard doesn’t have a Platform 2, as platforms there are numbered from 3. T4 trains on Platform 2 of Martin Place station run eastbound towards Bondi Junction. Two stops in this direction takes us to Edgecliff station.&lt;/li&gt;
    &lt;li&gt;We now want to check the train schedule for T4 trains departing after 5:08pm on Fridays. The next train would leave at 5:12, and is scheduled to arrive at 5:16:30pm, making the answer 5:17pm, or 17:17.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h5 id=&quot;flag-4&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{1717}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;firednd-1-30-points&quot;&gt;firednd-1 (30 points)&lt;/h3&gt;

&lt;p&gt;CEO of FireDnD here again!&lt;/p&gt;

&lt;p&gt;Quite recently, I had to fire my frontend web developer, because they were doing a terrible job, as you can probably tell from our &lt;a href=&quot;https://firednd-syd.web.app&quot; target=&quot;_blank&quot;&gt;incomplete website&lt;/a&gt;. I’m still in the process of removing all traces of him from our current website. Your first task is to find a picture of our fired frontend team member, as I haven’t deleted it from our website’s resources yet, but I can’t find it for some reason.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;h4 id=&quot;solution-5&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-5&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;Typically when I’m solving a CTF challenge which involves trying to find some hidden resource on a website, I’ll open the ‘Network’ tab of my browser, and start recording the requests the browser is making. These requests can tell me, for example, what images the browser is loading in - a fair initial suspicion would be that the browser is loading this image of the fired team member, but not displaying it.&lt;/p&gt;

  &lt;p&gt;However, this isn’t quite the case. If we visit the /team.html page, we can see that three images are being loaded in: team-1.jpg, team-2.jpg and team-4.jpg. The glaring omission of team-3.jpg suggests that this might be our missing file. Visiting /team-3.jpg gives us our flag!&lt;/p&gt;

  &lt;h5 id=&quot;flag-5&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{h3Lps_t0_c0uNt}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;firednd-2-30-points&quot;&gt;firednd-2 (30 points)&lt;/h3&gt;

&lt;p&gt;No way, it’s me, the CEO of &lt;a href=&quot;https://firednd-syd.web.app&quot; target=&quot;_blank&quot;&gt;FireDnD&lt;/a&gt; again!&lt;/p&gt;

&lt;p&gt;My fired frontend developer hid a secret webpage on our website. I found out about this cool way to prevent search engines from finding the page, so I used that to prevent the page from showing up. I also replaced the contents of the page. Surely no-one can find it now, right?&lt;/p&gt;

&lt;h4 id=&quot;solution-6&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-6&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;The first big hint in this challenge comes from the ‘cool way to prevent search engines from finding’ part - this is the exact function of robots.txt. If we visit /robots.txt, we find the following:&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-agent: Googlebot
Disallow: /ry4ns-s3cret-p4ge.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;We’ve now got the URL for the secret page! If we pay it a visit, however, we get this:&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi! CEO of FireDnD here! I have taken over Ryan's secret page after firing him. That being said, I heard that nothing is deleted from the internet forever. Surely no one has a copy of the old contents of this page?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Unfortunate. Except, not really, because every internet historian’s favourite tool, The Internet Wayback Machine at &lt;a href=&quot;web.archive.org&quot; target=&quot;_blank&quot;&gt;web.archive.org&lt;/a&gt; happens to conveniently have a copy of the page!&lt;/p&gt;

  &lt;p&gt;There’s an unloaded image on this page. Looking at the source code, we see&lt;/p&gt;

  &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Ryan's top secret page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, I'm Ryan, a developer at firednd. This is my secret page!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here is a secret:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/web/20210106050020im_/http://firednd-syd.web.app/FLAG{hiDD3n_in_the_s0uRce}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;giving us our flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-6&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{hiDD3n_in_the_s0uRce}&lt;/code&gt;&lt;/p&gt;

&lt;/details&gt;

&lt;h2 id=&quot;web&quot;&gt;Web&lt;/h2&gt;

&lt;h3 id=&quot;simplelogin-30-points-each&quot;&gt;simplelogin (30 points each)&lt;/h3&gt;

&lt;p&gt;When I grow up, I want to be a software developer at NASA. I’m still on my way to getting there. I decided to practice my web development skills and make an unbreakable login site. I bet you can’t hack me - I’ll even tell you that my username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;astronaut&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/tree/main/web/simplelogin-src&quot; target=&quot;_blank&quot;&gt;Challenge source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three flags that can be found at the above link.&lt;/p&gt;

&lt;p&gt;Flag 0 has three parts to it - you’ll have to find each part (labelled 1/3, 2/3 and 3/3) and join them together to get the full flag!&lt;/p&gt;

&lt;h4 id=&quot;flag-0-solution&quot;&gt;Flag 0 solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-7&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;(Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; on macOS.)&lt;/p&gt;

  &lt;p&gt;This first (well, zeroth) flag requires you to view the page source - that is, the code used to render the webpage to you - to look for comments. The flag is split up across three comments in three different files:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;index.html&lt;/p&gt;

      &lt;p&gt;This HTML file contains the overall structure of the page, and can be easily found through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+I&lt;/code&gt; and checking the ‘Elements’ tab or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+U&lt;/code&gt;, to view the raw HTML (on Chrome, at least).&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;hello.js&lt;/p&gt;

      &lt;p&gt;JS files usually make a webpage interactive. You could’ve found this from the ‘Sources’ tab, or noticing the JS file was loaded in the HTML source code, or even noticing the origin of the sneaky message in the ‘Console’ tab.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;style.css&lt;/p&gt;

      &lt;p&gt;CSS files make pages look pretty. You again could’ve found this from the ‘Sources’ tab, or noticing the CSS file was loaded in the HTML source code.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h5 id=&quot;flag-7&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{0_i_f0unD_tHre3_tYpEs_oF_cOmM3NtS}&lt;/code&gt;&lt;/p&gt;

&lt;/details&gt;

&lt;h4 id=&quot;flag-1-solution&quot;&gt;Flag 1 solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-8&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;(Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; on macOS.)&lt;/p&gt;

  &lt;p&gt;CTF authors like to involve cookies in challenges somehow, and this includes me! Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+I&lt;/code&gt; on Chrome and selecting the Application tab, and then ‘Cookies’, reveals all cookies set by the current site, including the flag!&lt;/p&gt;

  &lt;h5 id=&quot;flag-8&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{1_i_cHeCkeD_f0r_c0oki3S}&lt;/code&gt;&lt;/p&gt;

&lt;/details&gt;

&lt;h4 id=&quot;flag-2-solution&quot;&gt;Flag 2 solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-9&quot;&gt;Walkthrough&lt;/h5&gt;

  &lt;p&gt;You probably tried to login before anything else, but this is in fact the final flag! Logging in with incorrect details gives us the following message:&lt;/p&gt;

  &lt;p&gt;‘Password did not match expected encoded result: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aXJlQUxMeUxpa0VzUGFjZVNoaVBzMjA3JA==&lt;/code&gt;’&lt;/p&gt;

  &lt;p&gt;This looks a lot like base-64 encoding - the biggest giveaway is the occurrence of equal signs on the end (which has a 2/3 probability of happening with base-64). Googling for a base-64 decoder gives us plenty of results, and decoding it gets us the password to use with the username ‘astronaut’ - ‘ireALLyLikEsPaceShiPs207$’. Logging in will give you the flag.&lt;/p&gt;

  &lt;p&gt;You can also decode base-64 on a Linux command line with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 'aXJlQUxMeUxpa0VzUGFjZVNoaVBzMjA3JA==' | base64 -d&lt;/code&gt;.&lt;/p&gt;

  &lt;h5 id=&quot;flag-9&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{2_b4Se_64_iS_nOt_eNcrYpTi0n}&lt;/code&gt;&lt;/p&gt;

&lt;/details&gt;

&lt;h2 id=&quot;forensics&quot;&gt;Forensics&lt;/h2&gt;

&lt;h3 id=&quot;spotify-20-points&quot;&gt;Spotify (20 points)&lt;/h3&gt;

&lt;p&gt;i made my spotify look pretty do you like it&lt;/p&gt;

&lt;p&gt;Your flag will be a number. Wrap the number with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{}&lt;/code&gt; - for example, if the number is 42, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{42}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/forensics/spotify/_ctfd/files/spotify.jpg&quot; target=&quot;_blank&quot;&gt;spotify.jpg&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-7&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-10&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;I tried to hints for this one in plain sight - taking a look at the two recent search items shows you a song named ‘Multiply’ and another named ‘Resolution’ - resolution is a term to describe how many pixels tall and wide an image/video is.&lt;/p&gt;

  &lt;p&gt;From multiplying the resolution of the image (887 x 606), we get our solution.&lt;/p&gt;

  &lt;h5 id=&quot;flag-10&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{537522}&lt;/code&gt;&lt;/p&gt;

  &lt;h3 id=&quot;other-notes-1&quot;&gt;Other notes&lt;/h3&gt;
  &lt;p&gt;I made my Spotify look pretty using &lt;a href=&quot;https://github.com/khanhas/spicetify-cli&quot; target=&quot;_blank&quot;&gt;Spicetify&lt;/a&gt; with &lt;a href=&quot;https://github.com/morpheusthewhite/spicetify-themes/tree/master/Dribbblish&quot; target=&quot;_blank&quot;&gt;this theme&lt;/a&gt;.&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;blank-space-30-points&quot;&gt;Blank Space (30 points)&lt;/h3&gt;

&lt;p&gt;i love to listen to Taylor Swift while stargazing. here’s a picture I took, but my camera was broken&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/forensics/blank-space/_ctfd/files/blankspace.png&quot; target=&quot;_blank&quot;&gt;blankspace.png&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-8&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-11&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;In the workshop slides, I highly suggested getting either Photoshop or GIMP to use - however, this was entirely solvable with just Microsoft Paint.&lt;/p&gt;

  &lt;p&gt;I set the background of this image to #ffffff - this is the hexadecimal code for the colour white. I then used the paintbrush to hide the flag to #fffffd - a colour that is extremely close to white, but not quite, making the writing seem basically invisible.&lt;/p&gt;

  &lt;p&gt;When solving image challenges for CTFs like these, I typically use Photoshop:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Open the Levels tool from Edit &amp;gt; Adjustments &amp;gt; Levels&lt;/li&gt;
    &lt;li&gt;Mess around with the input level sliders, and then the output level sliders and see if something reveals itself.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;This would’ve worked perfectly well for this challenge. However, a simpler solution would be:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Open the image in Microsoft Paint.&lt;/li&gt;
    &lt;li&gt;Use the Fill bucket tool, and select a colour like black.&lt;/li&gt;
    &lt;li&gt;Click somewhere close to the border of the image, ‘flooding the image’.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Paint only fills neighbouring pixels with the exact same colour - this should’ve revealed the off-white writing.&lt;/p&gt;

  &lt;h5 id=&quot;flag-11&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{st4rBucKs_Lov3Rs}&lt;/code&gt;&lt;/p&gt;

  &lt;h3 id=&quot;other-notes-2&quot;&gt;Other notes&lt;/h3&gt;
  &lt;p&gt;Yes, this flag was a reference to the misheard ‘Starbucks Lovers’ lyrics from Taylor Swift’s Blank Space.&lt;/p&gt;

&lt;/details&gt;

&lt;h3 id=&quot;egg-nog-50-points&quot;&gt;Egg nog (50 points)&lt;/h3&gt;

&lt;p&gt;It’s hard to find egg nog after Christmas. It’s also hard to find my hidden message, I hope!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/forensics/egg-nog/_ctfd/files/eggnog.jpg&quot; target=&quot;_blank&quot;&gt;eggnog.jpg&lt;/a&gt;
&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/forensics/egg-nog/_ctfd/files/steggnog.png&quot; target=&quot;_blank&quot;&gt;steggnog.png&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-9&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-12&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;While this challenge uses a set of techniques that are relatively common in CTFs, paying attention to the workshop slides would have helped a lot here.&lt;/p&gt;

  &lt;p&gt;The first image you want to look at is eggnog.jpg - note that the contents featured in both images are basically identical, although the PNG is of much lower resolution. Looking at the file’s metadata, we can see that there is some hidden information in the EXIF data (JPG files can have EXIF data, PNG files don’t) - namely, the following string:&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jocksfindquartzglyphvexbmw&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;We shall save this for later use.&lt;/p&gt;

  &lt;p&gt;The second image is named steggnog.png - a huge hint that more advanced image steganography, like least significant bit steganography, might be in use here. Googling ‘online steganography’ yields &lt;a href=&quot;https://stylesuxx.github.io/steganography/&quot; target=&quot;_blank&quot;&gt;this website&lt;/a&gt;. sDecoding it yields the following:&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAJI{tzhpzdtpditdfdcjthtzx}&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;This is the point where this challenge now becomes more crypto than forensics - we can see the result of our steganography decode looks almost like a flag. This is where we go back to our older string - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jocksfindquartzglyphvexbmw&lt;/code&gt;. Googling this string yields a result about ‘perfect pangrams’ - sentences with all 26 letters of the alphabet exactly once. You might notice that this perfect pangram makes a perfect key for a &lt;em&gt;substitution cipher&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;Decoding the substitution cipher (using the perfect pangram as our ciphertext alphabet) on a website like &lt;a href=&quot;https://cryptii.com/pipes/alphabetical-substitution&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; gives us our flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-12&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{notsoinsignificantnow}&lt;/code&gt;&lt;/p&gt;

  &lt;h3 id=&quot;other-notes-3&quot;&gt;Other notes&lt;/h3&gt;
  &lt;p&gt;The reason the PNG was lower resolution was so that your computer didn’t die trying to decode using the steganography tool - fewer pixels means less work.&lt;/p&gt;

&lt;/details&gt;

&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;slides-10-points&quot;&gt;Slides (10 points)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1wS4-rn9sk3RTaAJHo2DJmBTq2G48ULC4ezQbbco7Gio/edit?usp=sharing&quot; target=&quot;_blank&quot;&gt;Here are the slides&lt;/a&gt; from today’s workshop. It comes with a free flag!&lt;/p&gt;

&lt;h4 id=&quot;solution-10&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-13&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;Find the slide about what CTF flags are - it’s in plain sight!&lt;/p&gt;

  &lt;h5 id=&quot;flag-13&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{y0ur_f1rSt_flaG}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;what-was-that-25-points&quot;&gt;What was that? (25 points)&lt;/h3&gt;

&lt;p&gt;Houston, we’ve got… a disappearing black hole??&lt;/p&gt;

&lt;p&gt;Make sure that the FLAG{} contents are all in lowercase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/misc/what-was-that/_ctfd/files/whatwasthat.mp4&quot; target=&quot;_blank&quot;&gt;whatwasthat.mp4&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-11&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;
  &lt;h5 id=&quot;walkthrough-14&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;This challenge features the distinctive short and long flashes (or dots and dashes used in Morse code). Fortunately, there’s also synced beeping noises with the video, which makes interpreting the Morse code a lot easier (although you can just use the video, too!):&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Open the audio from the video in an audio editor like Audacity.&lt;/li&gt;
    &lt;li&gt;Use the spectrogram to identify where each short (dot) flash or long (dash) sound is, and enter it into a Morse Code translator, and voila!&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h5 id=&quot;flag-14&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{no_remorse}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h3 id=&quot;starlang-30-points&quot;&gt;starlang (30 points)&lt;/h3&gt;

&lt;p&gt;I made my own programming language called starlang! It’s pretty self-explanatory. Can you figure out what this program prints?&lt;/p&gt;

&lt;p&gt;(Make sure to open the file with a text editor so that you can read its contents.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abiramen/2021-compclub-summer-ctf/blob/main/misc/starlang/_ctfd/files/my_program.starlang&quot; target=&quot;_blank&quot;&gt;my_program.starlang&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-12&quot;&gt;Solution&lt;/h4&gt;

&lt;details&gt;

  &lt;h5 id=&quot;walkthrough-15&quot;&gt;Walkthrough&lt;/h5&gt;
  &lt;p&gt;This challenge uses a fake, but straight-forward ‘programming language’ - this is what we call ‘pseudocode’, which is a simplified notation to describe how a program or algorithm should work.&lt;/p&gt;

  &lt;p&gt;There are some things that you might need to be careful for here:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;If a ‘branch’ of an if statement is true, then we don’t need to worry about other branches of the if statement. For example:&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_other_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;do_last_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; is true, then it doesn’t matter if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; is true as well - once we’ve completed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_something_else()&lt;/code&gt;, we skip to the end of the entire if statement structure.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Be careful with ‘less than’ - this is not the same as ‘less than or equal to’.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Following through each of the statements should get you to the flag.&lt;/p&gt;

  &lt;h5 id=&quot;flag-15&quot;&gt;Flag&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG{n3buL0uS_r3d5h1fT}&lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;On the day, we received 928 attempted flag submissions amongst 54 competitors in 10 teams, of which, 127 of submissions were correct.&lt;/p&gt;

&lt;p&gt;Thanks to all the students that came along and participated in workshops and the CTF! I hope to see you all next year, when we can hopefully actually run this event in person.&lt;/p&gt;

&lt;p&gt;Also a shoutout to all the CompClub team, workshop developers and mentors for such a fantastic week, as well as all the random people I’ve asked to test my challenges over the past 2 weeks!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Nearest by straight-line distance. The location of a station can be determined by the position of the ‘T’ logo on Google Maps. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="security" /><category term="ctf" /><summary type="html">I’ve been looking for the opportunity to do some form of high school outreach program for a while, so when CSESoc’s (my uni’s constituent society for computer science related degrees) CompClub decided to take applications for workshop developers, and saw the option for a security workshop, I knew I had to sign up. The following CTF was the result of my work with the help of a few fellow fantastic volunteers.</summary></entry><entry><title type="html">Making this site</title><link href="/making-site" rel="alternate" type="text/html" title="Making this site" /><published>2020-09-19T00:00:00+00:00</published><updated>2020-09-19T00:00:00+00:00</updated><id>/making-this-site</id><content type="html" xml:base="/making-site">&lt;p&gt;Hi! If you’re here, that means I’ve finally got around to fully completing my website! I purchased this domain 10
months ago, mostly neglected it for 9 of those months, or was super indecisive about how I wanted to approach it, and
then finally got around to working on it.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;p&gt;I knew the main feature I wanted to implement was a blog, and that I also wanted some place for a portfolio, while having a relatively unique design compared to most blogs. With this in mind, I quickly threw something together in Adobe Illustrator.&lt;/p&gt;
&lt;h2 id=&quot;making-a-logo&quot;&gt;Making a logo&lt;/h2&gt;
&lt;p&gt;I’ve had an idea in my mind to have some kind of ramen logo out of neon lights. After creating a wireframe in Illustrator, and a few Photoshop tutorials on neon glow effects later, I’ve got a new logo to use everywhere! :)&lt;/p&gt;
&lt;h2 id=&quot;a-tech-stack&quot;&gt;A tech stack&lt;/h2&gt;
&lt;p&gt;This was probably the part that held me off from working on this for the longest. For a long time, I was convinced that I would build my site using Vue.js, with the Vuetify component library, due to my prior experience with Vue. I also contemplated throwing in Nuxt in order to be able to server-side render some things. At some point, I realised that this was all extremely overkill, and would require actively running a server, which had many of its own costs.&lt;/p&gt;
&lt;h3 id=&quot;github-pages-and-dr-jekyll&quot;&gt;GitHub Pages, and Dr Jekyll&lt;/h3&gt;
&lt;p&gt;Once I realised that a static site would better suit my needs, I knew that I would use GitHub Pages for hosting. A friend of mine, ralismark, had mentioned how great Jekyll was, using it for &lt;a href=&quot;https://www.ralismark.xyz&quot; target=&quot;_blank&quot;&gt;his own site&lt;/a&gt;. I had known that Jekyll was a thing for a while, ever since I created my first GitHub Pages site in 2014, but had always ignored it, naively thinking that pure HTML/CSS was the way to go at the time.&lt;/p&gt;

&lt;p&gt;After building this site with Jekyll, I have to say it’s an absolute delight to work with. GitHub automatically builds a Jekyll site on push, and deploys it. Jekyll provides amazing templating support, reducing redundancy.Another fantastic feature is built-in support for writing pages and posts in Markdown (this is my first post in Markdown!! Hello world!!), for insertion into templates. While there are many Markdown-to-HTML converters out there, Jekyll just makes it seamless.&lt;/p&gt;

&lt;p&gt;If I ever require a page with server-side rendering, I can always host that on a separate domain. ralismark still says that Jekyll is great, although he does wish that he could server-side render LaTeX so that he doesn’t need to do that on the client’s device.&lt;/p&gt;
&lt;h3 id=&quot;frontend-frameworks&quot;&gt;Frontend frameworks&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;Admittedly as a result of me still being stuck in my old ways (or just being lazy), this site still uses jQuery in few places. I intend on porting it all to vanilla JavaScript at some point.&lt;/del&gt; This site is now free of jQuery!  I also made the mistake of deciding to use Bootstrap when I started writing this site - mainly for layout (responsive containers), but you can probably see, this site looks relatively un-Bootstrapish. I also intend on removing Bootstrap at some point, since most of the layout stuff shouldn’t be too hard to reimplement myself.&lt;/p&gt;
&lt;h2 id=&quot;fun-stuff&quot;&gt;Fun stuff&lt;/h2&gt;
&lt;p&gt;One of &lt;a href=&quot;https://mango.pdf.zone&quot; target=&quot;_blank&quot;&gt;my favourite blogs&lt;/a&gt;, by the legendary &lt;a href=&quot;https://twitter.com/mangopdf&quot;&gt;@mangopdf&lt;/a&gt;, has a couple of easter eggs baked into it. I decided to take some inspiration and add some fun stuff too! At the moment, there’s only one easter egg, which you’ll have to head to the homepage to learn about, but there’s definitely more coming soon!&lt;/p&gt;

&lt;p&gt;I also eventually realised that mangopdf’s blog uses Jekyll too, so I knew that I had made a good choice. 😎&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;
&lt;p&gt;Well, I have quite a few posts planned, so watch this space I guess! 🙃&lt;/p&gt;</content><author><name></name></author><category term="meta" /><summary type="html">Hi! If you’re here, that means I’ve finally got around to fully completing my website! I purchased this domain 10 months ago, mostly neglected it for 9 of those months, or was super indecisive about how I wanted to approach it, and then finally got around to working on it.</summary></entry><entry><title type="html">Setting up WSL and GitHub</title><link href="/wsl-github" rel="alternate" type="text/html" title="Setting up WSL and GitHub" /><published>2020-09-18T00:00:00+00:00</published><updated>2020-09-18T00:00:00+00:00</updated><id>/wsl-and-github</id><content type="html" xml:base="/wsl-github">&lt;p&gt;
    If you're a UNSW student, there's a good chance that you're here from my CSE setup guide for vscode.
    This is
    going to be a short guide to setting up WSL, which provides you with a Linux environment within Windows. To go
    through
    the WSL section, you'll need to be on Windows 10. If you're here just to learn some basic Git, you can
    &lt;a href=&quot;#git&quot;&gt;click here&lt;/a&gt; to skip all the Windows stuff, free of charge!
&lt;/p&gt;

&lt;h2 id=&quot;wsl&quot;&gt;Coding locally on your Windows 10 computer with WSL&lt;/h2&gt;
&lt;p&gt;Windows 10 now supports running Linux distributions from within it. We can set this up so that we can easily
    use a lot of the Linux commands and scripting which is taught in UNSW CSE degrees. You can even use your new Linux
    setup to go on and learn other languages over breaks, such as &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;
        target=&quot;_blank&quot;&gt;Rust&lt;/a&gt;.
    &lt;br&gt;&lt;br&gt;
    Before we proceed, there's two versions of WSL that you can use - WSL1 and WSL2. For most people, especially those
    of you that are relatively new to programming, WSL1 is the best option. WSL2 is still a bit rough around the edges,
    and you can always upgrade later. WSL2 also doesn't play very nicely with Type 2 Hypervisors such as VirtualBox and vmware, since it uses Hyper-V - this will restrict you to using Hyper-V for any virtual machines that you decide to make. If you're someone that uses Docker or really
    needs native Linux GUIs, &lt;a href=&quot;#wsl2&quot;&gt;click here for instructions on how to install WSL2.&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;Installing WSL1&lt;/h3&gt;
&lt;div class=&quot;alert&quot;&gt;
    You need to be on at least Windows 10 version 1803 to use WSL. You can check your Windows version by opening
    Search and entering &lt;code&gt;winver&lt;/code&gt;.
    If you need to update Windows, go
    &lt;a target=&quot;_blank&quot; href=&quot;https://support.microsoft.com/en-au/help/3159635&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;

&lt;ol&gt;
    &lt;li&gt;
        &lt;strong&gt;Open PowerShell.&lt;/strong&gt; Type in PowerShell into Windows Search, right click on the result and
        click &lt;strong&gt;Run as administrator&lt;/strong&gt;. Select Yes if a prompt shows up.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Run the following command:&lt;/strong&gt;
        &lt;pre&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/pre&gt;
        If you are prompted to restart your computer, do so.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Open the Microsoft Store.&lt;/strong&gt; You can again do this using Windows Search.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Search for Ubuntu and install it.&lt;/strong&gt; Ubuntu currently has the best support for WSL.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Once installed, open Ubuntu.&lt;/strong&gt; You can do this by opening Search and typing in
        &lt;code&gt;bash&lt;/code&gt;. Once you do this, a terminal should open!
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;You'll be guided through setting up an account.&lt;/strong&gt; Make sure you remember what password
        you use.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;We can now install a C compiler.&lt;/strong&gt; We'll be using gcc. You can use it just like dcc, but
        you'll get less helpful error messages. To install, run the following command:
        &lt;pre&gt;sudo apt-get install build-essential&lt;/pre&gt;
        Enter your password when prompted.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Run the following command to make sure everything is up to date.&lt;/strong&gt;
        &lt;pre&gt;sudo apt update &amp;&amp; sudo apt upgrade&lt;/pre&gt;
    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    You should now be able to use the text based Linux commands you learn during the course, replacing dcc with
    gcc. (Note: If you've learnt about &lt;code&gt;dcc --leak-check&lt;/code&gt;, it won't work with gcc.)&lt;br&gt;
    If you use VSCode, you can use &lt;code&gt;code [filename]&lt;/code&gt; to open a file. If you use Vim, Vim will work as
    normal. However, gedit won't work. Google 'wsl x server' if you're really desperate to use it.
&lt;/p&gt;

&lt;p&gt;
    If you want a prettier terminal with more features to use with WSL, &lt;a href=&quot;#wt&quot;&gt;click here&lt;/a&gt;
    to jump to those instructions. If you want to install dcc, &lt;a href=&quot;#dcc&quot;&gt;click here&lt;/a&gt;.
&lt;/p&gt;


&lt;h3 id=&quot;wsl2&quot;&gt;Installing WSL2&lt;/h3&gt;
&lt;div class=&quot;alert&quot;&gt;
    You need to be on at least Windows 10 version 1903 to use WSL2. If you aren't, you should probably use WSL1.
&lt;/div&gt;
&lt;ol&gt;
    &lt;li&gt;
        &lt;strong&gt;Follow Step 1 and 2 from the above section.&lt;/strong&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Run&lt;/strong&gt; &lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart&lt;/code&gt;
        in the same PowerShell window.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Download and run&lt;/strong&gt; &lt;a href=&quot;https://aka.ms/wsl2kernel&quot; target=&quot;_blank&quot;&gt;this installer from Microsoft.&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Run &lt;/strong&gt; &lt;code&gt;wsl --set-default-version 2&lt;/code&gt; in PowerShell.
    &lt;/li&gt;
    
    &lt;li&gt;
        &lt;strong&gt;Follow Step 3 onwards from the above section.&lt;/strong&gt;
    &lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Why is WSL2 seemingly eating my RAM?&lt;/h4&gt;
&lt;p&gt;
    If you have WSL2 running for a while, you might see a process called Vmmem in Task Manager eating up all your RAM. You can
    be relieved to know that this isn't the result of malware, but WSL2 using memory for cache. However, this isn't an issue
    whatsoever - if another process on your computer needs more RAM, WSL2 will reduce its cache usage - in fact, Windows itself
    uses any remaining unused RAM as cache to speed up your computer, because unused RAM is wasted RAM.
&lt;/p&gt;
&lt;p&gt;
    If this RAM usage still somewhat irrationally annoys you, you can do one of the following:
    &lt;ul&gt;
        &lt;li&gt;
            &lt;strong&gt;Run the following command in your WSL2 terminal.&lt;/strong&gt; 
            &lt;code&gt;sudo sh -c \&quot;echo 3 &gt;'/proc/sys/vm/drop_caches' &amp;&amp; swapoff -a &amp;&amp; swapon -a &amp;&amp; printf '\n%s\n' 'Cached RAM and Swap Cleared'\&quot;&lt;/code&gt;
        &lt;/li&gt;
        &lt;li&gt;
            Go to &lt;code&gt;%userprofile%&lt;/code&gt; in File Explorer (by entering it into the address bar) and creating a file called .wslconfig and entering
            the following:
&lt;pre&gt;
[wsl2]
memory=4096MB
&lt;/pre&gt;
            This restricts WSL2 to 4GB of RAM. If you're running Docker containers from WSL2, I encourage you to let WSL2 use at least half your system
            memory - I have mine at 12GB, or 60%. If you don't know what Docker is, you can just ignore this.
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;

&lt;h2 id=&quot;dcc&quot;&gt;Installing dcc&lt;/h2&gt;

&lt;p&gt;Your mileage may vary, but you can install dcc locally! Run the following commands:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;code&gt;curl -L https://github.com/COMP1511UNSW/dcc/releases/download/2.6.4/dcc_2.6.4_all.deb -o
            /tmp/dcc_2.6.4_all.deb&lt;/code&gt;&lt;br&gt;curl is
        a utility in Linux to download files from the internet. You may also see wget sometimes, which is very
        similar.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;code&gt;sudo apt install /tmp/dcc_2.6.4_all.deb&lt;/code&gt;&lt;br&gt;This installs the package we just downloaded.
    &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    Now, try compiling and running a program. If this doesn't work, run the command&lt;br&gt;
    &lt;code&gt;
    sudo bash -c &quot;echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope;echo 1 &gt; /proc/sys/vm/overcommit_memory&quot;
    &lt;/code&gt;,
    but only do this &lt;strong&gt;if you really need to.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
    Note that you should still follow the steps to install build-essential from earlier because it has a lot
    of other useful tools.
&lt;/p&gt;

&lt;h2 id=&quot;wt&quot;&gt;Very optional but very cool: Installing Windows Terminal&lt;/h2&gt;
&lt;p&gt;This part is very very optional, but installs &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;
        href=&quot;https://www.youtube.com/watch?v=8gw0rXPMMPE&quot;&gt;Windows Terminal&lt;/a&gt;, which allows you to access cmd,
    powershell and bash in one place, open multiple terminals (even side-by-side), and most importantly, use themes!&lt;/p&gt;
&lt;img style=&quot;max-width:100%&quot; class=&quot;post-image&quot; src=&quot;/assets/images/blog/cse-setup/wt.jpg&quot; alt=&quot;Windows Terminal&quot; /&gt;
&lt;div class=&quot;alert&quot;&gt;
    You need to be on at least Windows 10 version 1909 for this to work. You can check your Windows version by opening
    Search and entering &lt;code&gt;winver&lt;/code&gt;.
    If you're need to update Windows, go &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;
        href=&quot;https://support.microsoft.com/en-au/help/3159635/windows-10-update-assistant&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Open the Microsoft Store.&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Search for Windows Terminal and install it.&lt;/strong&gt; Once installed, you can open it by entering
        &lt;code&gt;wt&lt;/code&gt; or searching Windows Terminal in Search.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;If you want, you can adjust settings.&lt;/strong&gt; If you know how to read a JSON file, use
        &lt;kbd&gt;Ctrl+,&lt;/kbd&gt; to access settings. You can even find themes &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;
            href=&quot;https://terminalsplash.com&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;git&quot;&gt;Setting up Git and GitHub&lt;/h2&gt;
&lt;p&gt;
    Git is a really useful tool which allows you backup your code, revert to older versions, keep track of changes,
    update and pull your code from multiple devices,
    and provides several tools to allow you to work collaboratively. This is called version control.
&lt;/p&gt;
&lt;h3&gt;Signing up for GitHub&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; developer has a GitHub account. GitHub provides servers for you to host your code, using Git.
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Sign up for GitHub &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;
                href=&quot;https://github.com/join&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;
        This shouldn't take more than a minute&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Get the GitHub Education Pack!&lt;/strong&gt; GitHub Education is really handy. Students
        can get GitHub Pro, as well as heaps of other useful tools for free&lt;/strong&gt;.
        Visit &lt;a href=&quot;https://education.github.com/pack&quot; target=&quot;_blank&quot;
            rel=&quot;noopener noreferrer&quot;&gt;education.github.com&lt;/a&gt; to sign up!&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Follow someone on GitHub for the first time!&lt;/strong&gt; You can score bonus points by &lt;abbr
            title=&quot;Obviously me creating this post was just a ploy to get GitHub followers :P&quot;&gt;following me&lt;/abbr&gt;
        &lt;a href=&quot;https://github.com/abiramen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt; :)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Create your first repository &lt;a href=&quot;https://github.com/new&quot; target=&quot;_blank&quot;
                rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt; Think of a
        repository (or repo for short) as somewhere you store all your code for a project. Perhaps call your
        repo hello-world.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: If you're ever using GitHub for coursework, make sure that you make your repo private to prevent
    plagiarism.&lt;/p&gt;
&lt;h3&gt;Installing Git&lt;/h3&gt;
&lt;p&gt;If you're working on VNC, or with the CSE machines over SSH, Git is already installed on these machines!
    Otherwise, you'll need to install Git.&lt;/p&gt;
&lt;h5&gt;For Ubuntu/Debian (including WSL):&lt;/h5&gt;
&lt;p&gt;
    Run &lt;code&gt;sudo apt-get install git&lt;/code&gt; from your terminal.
&lt;/p&gt;
&lt;h5&gt;For Windows and macOS:&lt;/h5&gt;
&lt;p&gt;Download Git from &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://git-scm.com/downloads&quot;&gt;here&lt;/a&gt;, and
    follow the
    instructions to install.&lt;/p&gt;
&lt;h4&gt;Setting up Git on each machine&lt;/h4&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Telling Git your name. &lt;/strong&gt;Run &lt;code&gt;git config --global user.name &quot;yourusername&quot;&lt;/code&gt; -
        I
        usually just use my GitHub username here.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Telling Git your email. &lt;/strong&gt;Run &lt;code&gt;git config --global user.email
            &quot;name@example.com&quot;&lt;/code&gt; - I usually use the private GitHub email ending with
        @users.noreply.github.com,
        which can be found &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;
            href=&quot;https://github.com/settings/emails&quot;&gt;here&lt;/a&gt; under 'Keep email addresses
        private'.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Making use of our new repo&lt;/h3&gt;
&lt;p&gt;Now, we want to make use of our repo, and push code to it.&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Create a folder &lt;/strong&gt; called HelloWorld somewhere on your computer.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Open a terminal&lt;/strong&gt; and use &lt;code&gt;cd&lt;/code&gt; until you're in your new folder.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Initialise a &lt;em&gt;local&lt;/em&gt; repository&lt;/strong&gt; using the command &lt;code&gt;git init&lt;/code&gt;. This
        means you've set up a repository within your own computer, which tracks changes.&lt;/li&gt;
    &lt;li&gt;
        &lt;strong&gt;Make a hello_world.c file in the folder.&lt;/strong&gt;
        Here's some code for you to steal.
        &lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
int main(void) {
    printf(&quot;Hello world!&quot;);
    return 0;
}
&lt;/pre&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Run &lt;code&gt;git add hello_world.c&lt;/code&gt;.&lt;/strong&gt; This tells git that you want changes to the
        file to be
        included in the next update. If you ever have multiple files that you want to update, use
        &lt;code&gt;git add --all&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Run &lt;code&gt;git commit -m &quot;Initialise repo&quot;&lt;/code&gt;.&lt;/strong&gt; This keeps track of the update,
        noting what changes you've made, and stores it on the &lt;em&gt;local copy of the repository&lt;/em&gt;. Your commit
        message should always describe the changes you've made (in present tense!).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Now, we want to sync our local repository with our remote repository on GitHub.&lt;/strong&gt; The
        first time we do this, we have to tell git where our remote repository is. We do this with
        &lt;code&gt;git remote add origin https://github.com/your-username/your-repo-name.git&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;We can finally push the change to our remote repository.&lt;/strong&gt; Use &lt;code&gt;git push&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now see your hello_world.c file at https://github.com/your-username/your-repo-name!&lt;br&gt; You should
    always commit and push your code whenever you've
    made a notable change, so that you can revert your code if you ever have problems later on. Note that
    git will
    ask for your GitHub password each time you push. We can avoid this by &lt;a href=&quot;#ssh-git&quot;
        class=&quot;page-anchor-offset&quot;&gt;setting up an SSH
        keypair&lt;/a&gt;, which you can scroll down to read about.&lt;/p&gt;
&lt;h3&gt;Using git to work across multiple computers&lt;/h3&gt;
&lt;p&gt;We can make a copy of our hello-world repository on another computer using
    &lt;code&gt;git clone https://github.com/your-username/your-repo-name.git&lt;/code&gt;. This sets up a new local
    repository with the contents
    from the remote repository. Now, we can work on our code on this new computer, and use git add, commit and
    push
    to update our GitHub repository just like before. Now, when we return to our
    original computer, we run
    &lt;code&gt;git pull&lt;/code&gt; to fetch updates from the remote repository. as soon as we start. This is &lt;strong&gt;very
        important&lt;/strong&gt; to do
    - if you don't, and realise too late, you'll have to deal with resolving what's called a merge conflict.&lt;/p&gt;
&lt;p&gt;
    There is much, much more to Git. If you want to learn more about Git, and you're a UNSW student, take COMP1531,
    which teaches you all about Git, especially in the context of teamwork. You can also learn from the slides for this
    &lt;a href=&quot;http://bit.ly/GitGud2020Slides&quot;&gt;&lt;/a&gt;CSESoc workshop.&lt;/a&gt;
&lt;/p&gt; &lt;img style=&quot;max-width:100%&quot; class=&quot;post-image&quot; src=&quot;/assets/images/blog/cse-setup/git.jpg&quot; alt=&quot;Git&quot; /&gt;

&lt;h2 id=&quot;ssh-git&quot;&gt;Using SSH keypairs to push to GitHub&lt;/h2&gt;
&lt;h3&gt;Part 1: Generating a keypair&lt;/h3&gt;
&lt;p&gt;
    You'll first need to generate a keypair. If you haven't done this, check out the guide in my
    &lt;a href=&quot;/cse-setup#ssh-vsc&quot; target=&quot;_blank&quot;&gt;other post.&lt;/a&gt; If you have, you can use the same
    keypair.
&lt;/p&gt;

&lt;h3&gt;Part 2: Adding your public key to GitHub&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Open the GitHub Key Settings page. &lt;/strong&gt; &lt;a target=&quot;_blank&quot;
            href=&quot;https://github.com/settings/ssh/&quot;&gt;You can find it here.&lt;/a&gt; Press Add SSH key.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Give the key a name to describe what computer it is from.&lt;/strong&gt; This is so that you don't get
        mixed up if you add more computers.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Paste the public key you copied earlier.&lt;/strong&gt; Press Add when you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;post-image&quot; style=&quot;max-width:100%&quot; src=&quot;/assets/images/blog/cse-setup/ssh-github.jpg&quot; alt=&quot;GitHub&quot; /&gt;
&lt;h3&gt;Part 3: Updating your local repositories&lt;/h3&gt;
&lt;p&gt;If you already have any local repositories, you need to update them to use the SSH Git path. To do this,
    &lt;code&gt;cd&lt;/code&gt; to the directory, and enter
    &lt;code&gt;git remote set-url origin git@github.com:your-username/your-repo-name&lt;/code&gt;. &lt;br&gt;If you clone or set
    up any new repositories, you will also have
    to use the SSH address, i.e. &lt;code&gt;git clone git@github.com:your-username/your-repo-name&lt;/code&gt;. If you're
    ever unsure as to the SSH path, you can check
    on GitHub.
&lt;/p&gt;
&lt;img class=&quot;post-image&quot; style=&quot;max-width:100%&quot; src=&quot;/assets/images/blog/cse-setup/ssh-repo.jpg&quot;
    alt=&quot;SSH key for a repo&quot; /&gt;</content><author><name></name></author><category term="unsw-cse" /><category term="guide" /><category term="win-terminal" /><category term="wsl" /><category term="git" /><summary type="html">If you're a UNSW student, there's a good chance that you're here from my CSE setup guide for vscode. This is going to be a short guide to setting up WSL, which provides you with a Linux environment within Windows. To go through the WSL section, you'll need to be on Windows 10. If you're here just to learn some basic Git, you can click here to skip all the Windows stuff, free of charge!</summary></entry><entry><title type="html">CSE and VS Code</title><link href="/cse-setup" rel="alternate" type="text/html" title="CSE and VS Code" /><published>2020-09-18T00:00:00+00:00</published><updated>2020-09-18T00:00:00+00:00</updated><id>/vscode-and-cse</id><content type="html" xml:base="/cse-setup">&lt;p&gt;Hi there! If you’re new here, welcome to CSE! We’re going to be setting up a text editor called Visual Studio Code, or VS Code, to remotely work on the CSE computers without needing a VNC client!&lt;/p&gt;

&lt;h2 id=&quot;why-are-we-doing-this&quot;&gt;Why are we doing this?&lt;/h2&gt;

&lt;p&gt;You’ve likely used a program called TigerVNC to connect to the School of CSE’s computers before, which provides a visual interface (or ‘GUI’). This provides you with a full desktop environment. The experience you get out of this is very similar to the experience you would get out of sitting in front of a physical computer on campus.&lt;/p&gt;

&lt;p&gt;If you’re currently doing COMP1511, I would strongly advise you to use the Xfce desktop environment and gedit over TigerVNC for the first week, just to familiarise yourself with it. Don’t take your experience with it as a sign that Linux has to be ugly either - &lt;a href=&quot;https://reddit.com/r/unixporn&quot; target=&quot;_blank&quot;&gt;this subreddit has plenty of proof otherwise&lt;/a&gt;. (Despite the name, I promise it’s safe for work.)&lt;/p&gt;

&lt;p&gt;More importantly, under normal circumstances, you would be doing your exams in front of a similarly configured physical computer on campus. As of the start of 2021 however, it seems you’re generally free to use whatever setup you wish.&lt;/p&gt;

&lt;p&gt;The solution we’re about to go through provides a more seamless coding experience without having to load a full visual interface from CSE computers. This has the added benefits of not being affected by compression, especially if you have a poor connection, and other latency issues.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;First of all, we’re going to acquaint ourselves with Visual Studio Code, or VS Code. You’ve likely been introduced to a tool called gedit which allows you to write files of text (including code), or what’s called a text editor. VS Code does this, but it provides many more great features on top. To get started, you’ll need to install VS Code on your own computer, whether it be Windows, macOS or Linux.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Download and install Visual Studio Code.&lt;/strong&gt; You can find a download &lt;a href=&quot;https://code.visualstudio.com/download&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If prompted to do so during the installation process&lt;/strong&gt;, select the checkbox which says ‘Add to PATH’.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restart your computer once you’re done.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now have VS Code installed! You can now edit files on your own computer, but that’s not quite what we want - our goal is to edit files on CSE machines.&lt;/p&gt;

&lt;h2 id=&quot;our-friend-ssh&quot;&gt;Our friend, SSH&lt;/h2&gt;
&lt;p&gt;Some cool computer scientists invented a way (or more specifically, a set of rules, or protocols) to allow you to communicate with remote computers over the internet, called SSH, or Secure Shell. This allows us to edit files on another computer, such as the CSE servers, and run commands through a terminal on CSE servers.&lt;/p&gt;

&lt;p&gt;Luckily for us, VS Code has a way to use SSH to allow you to edit files and run commands on other computers.&lt;/p&gt;

&lt;div class=&quot;alert&quot;&gt;
  &lt;p&gt;If you’re on macOS, use &lt;kbd&gt;Cmd&lt;/kbd&gt; instead of &lt;kbd&gt;Ctrl&lt;/kbd&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;part-1-getting-started&quot;&gt;Part 1: Getting started&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open VS Code.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open the Extensions menu.&lt;/strong&gt; You can access it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+X&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search for and install the Remote-SSH extension.&lt;/strong&gt; Once this is done, you might be prompted to reload the window.
 &lt;img src=&quot;/assets/images/blog/cse-setup/ssh-extension.jpg&quot; alt=&quot;Install the SSH extension.&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;part-2-improving-security&quot;&gt;Part 2: Improving security&lt;/h3&gt;

&lt;div class=&quot;alert&quot;&gt;
  &lt;p&gt;Not performing this step can make your CSE account accessible to anyone while you’re connected. Accounts that don’t enable this will not be able to use VS Code to connect to CSE computers in the future.&lt;/p&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open the VS Code settings pane.&lt;/strong&gt; To do this, click the settings icon near the bottom left, or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+,&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search for ‘Remote Server Listen on Socket’.&lt;/strong&gt; Tick the corresponding checkbox once it appears.
&lt;img src=&quot;/assets/images/blog/cse-setup/socket.jpg&quot; alt=&quot;Enable the Remote Server Listen on Socket option&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search for ‘Lockfiles In Tmp’.&lt;/strong&gt; Again, select the corresponding checkbox.
&lt;img src=&quot;/assets/images/blog/cse-setup/lockfiles.jpg&quot; alt=&quot;Lockfiles in Tmp&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Close and reopen VS Code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congrats! You’re now safer from nefarious hackers, or inadvertent intruders.&lt;/p&gt;

&lt;p&gt;Note: If you’re coming here from the older version of my guide, please switch to using &lt;strong&gt;vscode.cse.unsw.edu.au&lt;/strong&gt;, rather than login, wagner, weill or williams. If not you can ignore this.&lt;/p&gt;

&lt;h3 id=&quot;part-3-logging-in&quot;&gt;Part 3: Logging in&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open the Remote-SSH menu.&lt;/strong&gt; This can be done by clicking this button&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/blog/cse-setup/ssh-icon.jpg&quot; alt=&quot;SSH Icon&quot; /&gt; 
in the bottom left. The menu should look like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/blog/cse-setup/ssh-menu.jpg&quot; alt=&quot;SSH menu&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Click Connect to Host.&lt;/strong&gt; In the field that shows up, type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z5555555@vscode.cse.unsw.edu.au&lt;/code&gt;, using your zID instead. Hit &lt;kbd&gt;Enter&lt;/kbd&gt;.
 A new window will open.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If asked to select a remote platform&lt;/strong&gt;, select Linux.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enter your password when prompted.&lt;/strong&gt; If your password is wrong, you will prompted to retry. Once you’ve done that, you should be connected successfully!
    &lt;ul&gt;
      &lt;li&gt;Use &lt;kbd&gt;Ctrl+O&lt;/kbd&gt; to open a file.&lt;/li&gt;
      &lt;li&gt;Use &lt;kbd&gt;Ctrl+`&lt;/kbd&gt; (that’s the key to the left of the number row) to open a terminal pane.
This is exactly like a terminal window in TigerVNC. You can run &lt;code&gt;ls&lt;/code&gt; to see your files!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;We can save some time by adding this to our hosts list.&lt;/strong&gt; Click the SSH icon in the bottom left again, click Connect to Host, and this time, click &lt;strong&gt;Add New SSH Host.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enter the following command:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh z5555555@vscode.cse.unsw.edu.au -A&lt;/code&gt;, replacing with your own zID again, and hit &lt;kbd&gt;Enter&lt;/kbd&gt;. If prompted which configuration file to save to, select the first one.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You should now see vscode.cse.unsw.edu.au on the Connect to Host menu.&lt;/strong&gt; This means you don’t have to type it in each time.
 &lt;a href=&quot;/assets/images/blog/cse-setup/ssh-menu-2.jpg&quot;&gt;SSH menu&lt;/a&gt;
If you had an issue, scroll down to &lt;a href=&quot;#troubleshooting&quot; class=&quot;page-anchor-offset&quot;&gt;troubleshooting&lt;/a&gt; section.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;making-vs-code-even-cooler&quot;&gt;Making VS Code even cooler&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/cse-setup/vscode.jpg&quot; alt=&quot;My VS Code over SSH&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;editor-rulers&quot;&gt;Editor rulers&lt;/h3&gt;
&lt;p&gt;The COMP1511 style guide requires you to make sure your lines of code aren’t longer than 80 characters (and it’s good practice to do so!). You can make VS Code show a handy little ruler to make sure your lines aren’t too long.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open the settings.json file.&lt;/strong&gt; To do this, press &lt;kbd&gt;Ctrl+Shift+P&lt;/kbd&gt; and search for &lt;strong&gt;Open Settings (JSON).&lt;/strong&gt; A file should open.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;We need to add to this file.&lt;/strong&gt; You should see that the last line is a curly brace like this: &lt;code&gt;}&lt;/code&gt;. What we want to do is add a comma to the second last line. Then, create a new line after the comma, and paste this:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;[c]&quot; :{
 &quot;editor.rulers&quot; : [
     80
 ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-cc-extension&quot;&gt;The C/C++ extension&lt;/h3&gt;
&lt;p&gt;The VS Code C/C++ extension will make your life a lot easier when coding. To install it,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open a Remote-SSH window&lt;/strong&gt; and connect to CSE servers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open the Extensions pane&lt;/strong&gt; by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+X&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Search for C/C++ and install the extension by Microsoft.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-extensions&quot;&gt;Other extensions&lt;/h3&gt;
&lt;p&gt;VS Code has heaps of themes and extensions. Some which I use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;C/C++ Snippets.&lt;/strong&gt; Occasionally saves time with suggestions. Make sure to install from your Remote-SSH window.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Material Icon Theme.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dainty and Dainty - Material Theme.&lt;/strong&gt; I personally use Dainty - Material Theme Ocean.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discord Rich Presence.&lt;/strong&gt; If you use Discord, then it’ll update your currently playing status with details of what you’re coding on. If one of your friends tries to drag you into a voice call, you can just open up VS Code and tell them that you’re busy working :P&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bonus-coins-ssh-and-ssh-keys&quot;&gt;Bonus coins: SSH and SSH keys&lt;/h2&gt;
&lt;p&gt;Congrats! You made it to the bonus section. Following these instructions will mean you won’t be asked for a password each time you open a new SSH window, while still keep your connection secure, using magic in the form of mathematics.&lt;/p&gt;

&lt;h4 id=&quot;part-1-generate-a-keypair&quot;&gt;Part 1: Generate a keypair&lt;/h4&gt;
&lt;h5 id=&quot;windows-10&quot;&gt;Windows 10&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open the Windows Command Prompt.&lt;/strong&gt; You can do this by entering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; in Search.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generate a keypair.&lt;/strong&gt;  Use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You’ll be asked where you want to save the key.&lt;/strong&gt; Leave this blank, and press &lt;kbd&gt;Enter&lt;/kbd&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You’ll be asked to set a password.&lt;/strong&gt; Leave this blank, and press &lt;kbd&gt;Enter&lt;/kbd&gt; again. Do the same when you are asked to confirm it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using the same Command Prompt as before&lt;/strong&gt;, enter the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code %userprofile%/.ssh/id_rsa.pub&lt;/code&gt;. This should open up a file in VS Code, starting with ssh-rsa and followed by a long mess of characters. &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Don’t close this file, but use &lt;kbd&gt;Ctrl+A Ctrl+C&lt;/kbd&gt; to copy the entire contents of this file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;linuxmacos&quot;&gt;Linux/macOS&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open the Terminal.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generate a keypair.&lt;/strong&gt;  Use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You’ll be asked where you want to save the key.&lt;/strong&gt; Leave this blank, and press &lt;kbd&gt;Enter&lt;/kbd&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You’ll be asked to set a password.&lt;/strong&gt; Leave this blank, and press &lt;kbd&gt;Enter&lt;/kbd&gt; again. Do the same when you are asked to confirm it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your computer has now generated two files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt; file is what’s called a public key, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt; is a private key. &lt;strong&gt;Never share (or even open) your private key.&lt;/strong&gt; It’s called a private key for a reason :P&lt;/p&gt;

&lt;h4 id=&quot;part-2-using-the-keypair-for-cse-machines&quot;&gt;Part 2: Using the keypair for CSE machines&lt;/h4&gt;
&lt;p&gt;Now, we need to tell the CSE computer that your computer is trustworthy, and you are who you claim to be. To do this, we need to give the CSE computer the public key you just generated. If you’re on Linux/macOS, this should be pretty easy, but if you’re on Windows 10, there’s a few more steps.&lt;/p&gt;

&lt;h5 id=&quot;windows-10-1&quot;&gt;Windows 10&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Using your existing SSH or VLAB connection, open a terminal on the CSE computers.&lt;/strong&gt; Run the following command. &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir ~/.ssh;chmod 700 ~/.ssh;touch ~/.ssh/authorized_keys;chmod 600 ~/.ssh/authorized_keys;code ~/.ssh/authorized_keys&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A window for a file called authorized_keys should open in VS Code.&lt;/strong&gt; Paste your public key from earlier into this file, and save.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;linuxmacos-1&quot;&gt;Linux/macOS&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open the Terminal.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Run the following command&lt;/strong&gt;, replacing with your own zID.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-copy-id z5555555@cse.unsw.edu.au&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enter your password.&lt;/strong&gt; You’ll be asked for your CSE password one last time, for the key to be copied over.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila! You had it a bit easier here.&lt;/p&gt;

&lt;h4 id=&quot;part-3-telling-vs-code-on-your-computer-to-use-your-new-keys&quot;&gt;Part 3: Telling VS Code on your computer to use your new keys&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;On your local machine, open the SSH menu in VS Code.&lt;/strong&gt; Click the SSH icon in the bottom left, then &lt;strong&gt;Open Configuration File&lt;/strong&gt;, and select the first option. You should see something like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host vscode.cse.unsw.edu.au
    HostName vscode.cse.unsw.edu.au
    User z5555555
    ForwardAgent yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;We need to tell the SSH connection to use our private key.&lt;/strong&gt; Add the following line to your config file, after the line with ‘User’ on it. Make sure to indent it so that it’s in line with the others.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Make sure to enter your username. If you don’t know it, it’s the part after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:/Users/&lt;/code&gt; when you open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IdentityFile &quot;C:/Users/[YOURUSERNAME]/.ssh/id_rsa&quot;&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Linux/macOS&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IdentityFile ~/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you’ve done this, you should be able to open Remote-SSH in VS Code without requiring a password.&lt;/p&gt;

&lt;p&gt;If you need to add another public key to authorized_keys (for another computer), you can enter it on a new line.&lt;/p&gt;

&lt;h2 id=&quot;coding-on-your-own-computer&quot;&gt;Coding on your own computer&lt;/h2&gt;

&lt;p&gt;This guide was once part of a much larger guide which involved setting up to allow you to code on your own computer. However, this was much more than what most 1511 students need. It’s worth noting that you need to have an internet connection for SSH to work. If your train route has poor reception, and you want to code on the train, you would need an alternative.&lt;/p&gt;

&lt;p&gt;Even then, I would still recommend setting up your own local coding setup at some point. If you’re new to coding and you’re doing 1511 right now, I wouldn’t say you should worry about this. However, if you do intend on going on to study more CSE courses, I recommend that you come back over the break after term ends and &lt;a href=&quot;/wsl-github&quot;&gt;check out this other post I wrote&lt;/a&gt;, which goes through setting up a Linux development environment if you have a Windows 10 computer, and using Git and GitHub to keep copies of your work on different computers and the internet.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting-ssh-over-vs-code&quot;&gt;Troubleshooting SSH over VS Code&lt;/h2&gt;
&lt;p&gt;If you’re having trouble connecting to VS Code, a fix that tends to work is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Log in to the CSE servers using TigerVNC.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open a terminal.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Run the following command:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -r ~/.vscode-server&lt;/code&gt;. Make sure to copy and paste this command carefully.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, if you know how to open a Command Prompt/Terminal, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -t z5555555@cse.unsw.edu.au &quot;rm -r ~/.vscode-server&quot;&lt;/code&gt;, replacing with your own zID.&lt;/p&gt;

&lt;p&gt;If this doesn’t work, try some of the solutions &lt;a href=&quot;https://stackoverflow.com/questions/59978826/why-ssh-connection-timed-out-in-VS Code&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;have-feedback-or-want-to-reach-out&quot;&gt;Have feedback, or want to reach out?&lt;/h2&gt;
&lt;p&gt;If you’ve spotted an error, or have any suggestions or improvements that I can make, feel free to contact me! My details are at the bottom of this page.&lt;/p&gt;

&lt;h2 id=&quot;official-guide&quot;&gt;Official guide&lt;/h2&gt;

&lt;p&gt;As of late October 2020, CSE now has an official guide available for using VS Code to connect over SSH. While the steps you’ve just followed cover all of what’s in the guide (and more!), and is up-to-date as of the time of writing, you can find the official guide &lt;a href=&quot;https://www.cse.unsw.edu.au/~learn/homecomputing/VS Code/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Thanks to the following people who’ve looked over this guide and provided feedback!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ralismark&quot; target=&quot;_blank&quot;&gt;ralismark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adaluong&quot; target=&quot;_blank&quot;&gt;adaluong&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lukefisklennon&quot; target=&quot;_blank&quot;&gt;lukefisklennon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tfpk&quot; target=&quot;_blank&quot;&gt;tfpk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This actually represents an extremely large number, which is used to form a mathematical lock. This is called RSA encryption and you can learn more about it in MATH3411. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Technically multiple commands, which I’ve condensed down for you. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="unsw-cse" /><category term="guide" /><category term="vscode" /><summary type="html">Hi there! If you’re new here, welcome to CSE! We’re going to be setting up a text editor called Visual Studio Code, or VS Code, to remotely work on the CSE computers without needing a VNC client!</summary></entry></feed>